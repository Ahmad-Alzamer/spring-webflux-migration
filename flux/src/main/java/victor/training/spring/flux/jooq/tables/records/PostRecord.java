/*
 * This file is generated by jOOQ.
 */
package victor.training.spring.flux.jooq.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;

import victor.training.spring.flux.jooq.tables.Post;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PostRecord extends UpdatableRecordImpl<PostRecord> implements Record4<Long, Long, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.post.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.post.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.post.author_id</code>.
     */
    public void setAuthorId(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.post.author_id</code>.
     */
    public Long getAuthorId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.post.body</code>.
     */
    public void setBody(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.post.body</code>.
     */
    public String getBody() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.post.title</code>.
     */
    public void setTitle(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.post.title</code>.
     */
    public String getTitle() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Long, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Long, Long, String, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Post.POST.ID;
    }

    @Override
    public Field<Long> field2() {
        return Post.POST.AUTHOR_ID;
    }

    @Override
    public Field<String> field3() {
        return Post.POST.BODY;
    }

    @Override
    public Field<String> field4() {
        return Post.POST.TITLE;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getAuthorId();
    }

    @Override
    public String component3() {
        return getBody();
    }

    @Override
    public String component4() {
        return getTitle();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getAuthorId();
    }

    @Override
    public String value3() {
        return getBody();
    }

    @Override
    public String value4() {
        return getTitle();
    }

    @Override
    public PostRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public PostRecord value2(Long value) {
        setAuthorId(value);
        return this;
    }

    @Override
    public PostRecord value3(String value) {
        setBody(value);
        return this;
    }

    @Override
    public PostRecord value4(String value) {
        setTitle(value);
        return this;
    }

    @Override
    public PostRecord values(Long value1, Long value2, String value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PostRecord
     */
    public PostRecord() {
        super(Post.POST);
    }

    /**
     * Create a detached, initialised PostRecord
     */
    public PostRecord(Long id, Long authorId, String body, String title) {
        super(Post.POST);

        setId(id);
        setAuthorId(authorId);
        setBody(body);
        setTitle(title);
    }
}
