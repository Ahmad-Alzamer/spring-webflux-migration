/*
 * This file is generated by jOOQ.
 */
package victor.training.spring.flux.jooq.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;

import victor.training.spring.flux.jooq.tables.Comment;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CommentRecord extends UpdatableRecordImpl<CommentRecord> implements Record4<Long, String, String, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.comment.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.comment.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.comment.comment</code>.
     */
    public void setComment(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.comment.comment</code>.
     */
    public String getComment() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.comment.name</code>.
     */
    public void setName(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.comment.name</code>.
     */
    public String getName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.comment.post_id</code>.
     */
    public void setPostId(Long value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.comment.post_id</code>.
     */
    public Long getPostId() {
        return (Long) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, String, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Long, String, String, Long> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Comment.COMMENT.ID;
    }

    @Override
    public Field<String> field2() {
        return Comment.COMMENT.COMMENT_;
    }

    @Override
    public Field<String> field3() {
        return Comment.COMMENT.NAME;
    }

    @Override
    public Field<Long> field4() {
        return Comment.COMMENT.POST_ID;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getComment();
    }

    @Override
    public String component3() {
        return getName();
    }

    @Override
    public Long component4() {
        return getPostId();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getComment();
    }

    @Override
    public String value3() {
        return getName();
    }

    @Override
    public Long value4() {
        return getPostId();
    }

    @Override
    public CommentRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public CommentRecord value2(String value) {
        setComment(value);
        return this;
    }

    @Override
    public CommentRecord value3(String value) {
        setName(value);
        return this;
    }

    @Override
    public CommentRecord value4(Long value) {
        setPostId(value);
        return this;
    }

    @Override
    public CommentRecord values(Long value1, String value2, String value3, Long value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CommentRecord
     */
    public CommentRecord() {
        super(Comment.COMMENT);
    }

    /**
     * Create a detached, initialised CommentRecord
     */
    public CommentRecord(Long id, String comment, String name, Long postId) {
        super(Comment.COMMENT);

        setId(id);
        setComment(comment);
        setName(name);
        setPostId(postId);
    }
}
